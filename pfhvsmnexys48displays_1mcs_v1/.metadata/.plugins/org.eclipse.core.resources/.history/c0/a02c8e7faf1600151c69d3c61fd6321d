/*
 * Copyright (c) 2009-2012 Xilinx, Inc.  All rights reserved.
 *
 * Xilinx, Inc.
 * XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" AS A
 * COURTESY TO YOU.  BY PROVIDING THIS DESIGN, CODE, OR INFORMATION AS
 * ONE POSSIBLE   IMPLEMENTATION OF THIS FEATURE, APPLICATION OR
 * STANDARD, XILINX IS MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION
 * IS FREE FROM ANY CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE
 * FOR OBTAINING ANY RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION.
 * XILINX EXPRESSLY DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO
 * THE ADEQUACY OF THE IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO
 * ANY WARRANTIES OR REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE
 * FROM CLAIMS OF INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE.
 *
 */

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include "platform.h"
#include <xparameters.h> // add
#include <xiomodule.h>

XIOModule gpo;
volatile u32 ct = 0;
u32 time = 0;
u32 inc = 1000;

void timerTick(void* ref) {
  ct++; // increase ct every millisecond
}
void delay(u32 ms) {
  ct = 0; // set the counter to 0
  while (ct < ms) // wait for ms number of milliseconds
    ;
}
void print(char *str);

int main()
{
    init_platform();

    u32 gpi1_data;

	XIOModule gpi;
	XIOModule gpo;

	XIOModule_Initialize(&gpi, XPAR_IOMODULE_0_DEVICE_ID);
	XIOModule_Start(&gpi);
	XIOModule_Initialize(&gpo, XPAR_IOMODULE_0_DEVICE_ID);
	XIOModule_Start(&gpo);

//	XIOModule_Initialize(&gpo, XPAR_IOMODULE_0_DEVICE_ID); // Initialize the GPO module

	microblaze_register_handler(XIOModule_DeviceInterruptHandler,                               //
							  XPAR_IOMODULE_0_DEVICE_ID); // register the interrupt handler     //
	                                                                                            //
//	XIOModule_Start(&gpo); // start the GPO module                                              //
	                                                                                            //
	XIOModule_Connect(&gpo, XIN_IOMODULE_FIT_1_INTERRUPT_INTR, timerTick,                       //
					NULL); // register timerTick() as our interrupt handler                     //
	XIOModule_Enable(&gpo, XIN_IOMODULE_FIT_1_INTERRUPT_INTR); // enable the interrupt          //
	                                                                                            //
	microblaze_enable_interrupts(); // enable global interrupts                                 //


	int i;
	while (1) {

		gpi1_data = XIOModule_DiscreteRead(&gpi, 1);

		if(ct = time + inc) {
			time = ct;

			xil_printf("DISP = %x %x %x %x", DISP[3], DISP[2], DISP[1], DISP[0]);
		}


	}

    return 0;
}
